{
  "Type": "Article",
  "Name": "Templates",
  "Information": "A template is a C++ entity that defines one of the following:\n\na family of classes (class template), which may be nested classes\na family of functions (function template), which may be member functions\nan alias to a family of types (alias template)\n(since C++11)\na family of variables (variable template)\n(since C++14)\na concept (constraints and concepts)\n(since C++20)\nTemplates are parameterized by one or more template parameters, of three kinds: type template parameters, non-type template parameters, and template template parameters.\n\nWhen template arguments are provided, or, for function and class (since C++17) templates only, deduced, they are substituted for the template parameters to obtain a specialization of the template, that is, a specific type or a specific function lvalue. Specializations may also be provided explicitly: full specializations are allowed for class, variable (since C++14) and function templates, partial specializations are only allowed for class templates and variable templates (since C++14).\n\nWhen a class template specialization is referenced in context that requires a complete object type, or when a function template specialization is referenced in context that requires a function definition to exist, the template is instantiated (the code for it is actually compiled), unless the template was already explicitly specialized or explicitly instantiated. Instantiation of a class template doesn't instantiate any of its member functions unless they are also used. At link time, identical instantiations generated by different translation units are merged.",
  "Difficulty": 3,
  "RelatedThemes": [
    "theme_metaprogramming"
  ],
  "Links": [
    "https://docs.microsoft.com/en-us/cpp/cpp/templates-cpp?view=msvc-170"
  ],
  "Theme": [
    {
      "Name": "theme_metaprogramming",
      "Weight": 1.0
    }
  ],
  "DirectTasks": [
  ]
}
