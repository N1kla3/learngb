{
  "Type": "Article",
  "Name": "Move semantics",
  "Information": "To understand the move semantics first let’s look at copy semantics. In general, all classes in C++ can be copied using one of special methods:\nCopy constructor\nT t1;\nT t2(t1);\nCopy assignment operator\nT t1, t2;\nt2 = t1;\nSimilarly C++11 defined another two methods in order to allow moving objects instead of copying:\nMove constructor\nT t1;\nT t2(std::move(t1));\nMove assignment operator\nT t1, t2;\nt2 = std::move(t1);\nIn general, move semantics allows us to take an object from the current context and pass it to another one, avoiding copy when the original object is not needed anymore. If we want to move objects, we need to use std::move function, as in the above example.\nIt is also worth to mention about 2 issues related to these examples:\nWhat happens with the t1 variable after the move? According to C++ standard variable after the move is in „valid but unspecified state”.",
  "Difficulty": 3,
  "RelatedThemes": [
    "theme_move_semantics"
  ],
  "Links": [
    "https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html",
    "https://www.internalpointers.com/post/c-rvalue-references-and-move-semantics-beginners"
  ],
  "Theme": [
    {
      "Name": "theme_move_semantics",
      "Weight": 1.1
    }
  ],
  "DirectTasks": [
  ]
}
