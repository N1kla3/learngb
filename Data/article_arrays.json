{
  "Type": "Article",
  "Name": "Arrays",
  "Information": "An array is a series of elements of the same type placed in contiguous memory locations that can be individually referenced by adding an index to a unique identifier.\n\nThat means that, for example, five values of type int can be declared as an array without having to declare 5 different variables (each with its own identifier). Instead, using an array, the five int values are stored in contiguous memory locations, and all five can be accessed using the same identifier, with the proper index.\n\nFor example, an array containing 5 integer values of type int called foo could be represented as: where each blank panel represents an element of the array. In this case, these are values of type int. These elements are numbered from 0 to 4, being 0 the first and 4 the last; In C++, the first element in an array is always numbered with a zero (not a one), no matter its length.\n\nLike a regular variable, an array must be declared before it is used. A typical declaration for an array in C++ is:\n\ntype name [elements];\n\nwhere type is a valid type (such as int, float...), name is a valid identifier and the elements field (which is always enclosed in square brackets []), specifies the length of the array in terms of the number of elements.\n\nTherefore, the foo array, with five elements of type int, can be declared as:\n\n \nint foo [5];\n By default, regular arrays of local scope (for example, those declared within a function) are left uninitialized. This means that none of its elements are set to any particular value; their contents are undetermined at the point the array is declared.\n\nBut the elements in an array can be explicitly initialized to specific values when it is declared, by enclosing those initial values in braces {}. For example:\n\n \nint foo [5] = { 16, 2, 77, 40, 12071 }; \n\n\nThis statement declares an array that can be represented like this: The number of values between braces {} shall not be greater than the number of elements in the array. For example, in the example above, foo was declared having 5 elements (as specified by the number enclosed in square brackets, []), and the braces {} contained exactly 5 values, one for each element. If declared with less, the remaining elements are set to their default values (which for fundamental types, means they are filled with zeroes). For example:\n\n \nint bar [5] = { 10, 20, 30 }; \n\n\nWill create an array like this: The initializer can even have no values, just the braces:\n\n \nint baz [5] = { }; \n\n\nThis creates an array of five int values, each initialized with a value of zero: When an initialization of values is provided for an array, C++ allows the possibility of leaving the square brackets empty []. In this case, the compiler will assume automatically a size for the array that matches the number of values included between the braces {}:\n\n \nint foo [] = { 16, 2, 77, 40, 12071 };\n\n\nAfter this declaration, array foo would be 5 int long, since we have provided 5 initialization values.\n\nFinally, the evolution of C++ has led to the adoption of universal initialization also for arrays. Therefore, there is no longer need for the equal sign between the declaration and the initializer. Both these statements are equivalent:\n\n1\n2\nint foo[] = { 10, 20, 30 };\nint foo[] { 10, 20, 30 }; \n\n\nStatic arrays, and those declared directly in a namespace (outside any function), are always initialized. If no explicit initializer is specified, all the elements are default-initialized (with zeroes, for fundamental types).\n",
  "Difficulty": 1,
  "RelatedThemes": [
    "theme_containers"
  ],
  "Links": [
    "https://metanit.com/cpp/tutorial/2.15.php",
    "https://docs.microsoft.com/en-us/cpp/cpp/arrays-cpp?view=msvc-170",
    "https://www.w3schools.com/cpp/cpp_arrays.asp"
  ],
  "Theme": [
    {
      "Name": "theme_containers",
      "Weight": 1.0
    },
    {
      "Name": "theme_Basic",
      "Weight": 0.7
    }
  ],
  "DirectTasks": [

  ]
}
